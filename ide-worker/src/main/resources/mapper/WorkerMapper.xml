<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boncfc.ide.server.worker.mapper.WorkerMapper">
    <select id="getWorkerExecutableJobType" parameterType="string" resultType="string">
        select distinct wg.job_type
        from workers w
        inner join worker_group_rel wgr
        on w.WORKER_ID = wgr.WORKER_ID
        and w.IP = #{workerAddress}
        and w.DELETED = 'N'
        inner join worker_groups wg
        on wgr.GROUP_ID = wg.GROUP_ID
        and wg.DELETED = 'N'
    </select>

    <select id="getWorkspace" resultType="map">
        select cast(workspace_id as varchar2(16)) workspace_id,
        cast(max_job_parallel_cnt as varchar2(16)) max_job_parallel_cnt
        from workspace where deleted = 'N'
    </select>

    <select id="getJobInstId" parameterType="string" resultType="string">
        select ji_id from (
        select ji_id from job_instance_queue jq
        where sysdate > create_time and
        <foreach item="jobType" index="index" collection="jobTypeList"
                 open="job_type in (" separator="," close=")" nullable="true">
            #{jobType}
        </foreach>
        order by priority desc, create_time asc) where ROWNUM = 1
    </select>

    <select id="getJobInstanceInfo" parameterType="string"
            resultType="com.boncfc.ide.plugin.task.api.model.JobInstance">
        select ji_id,
        jfi_id,
        job_id,
        jd_id,
        batch_time,
        batch_no,
        ji_type,
        job_conf,
        status,
        extended_status,
        retry_count,
        retry_interval_s,
        event_dependency,
        job_dependency,
        selected_time,
        taken_time,
        finish_time,
        worker_ip,
        is_dry_run,
        enabled,
        create_time,
        update_time
        from JOB_INSTANCE
        where ji_id = #{jiId}
    </select>

    <select id="getJobAllParams" parameterType="map"
            resultType="com.boncfc.ide.plugin.task.api.model.JobInstanceParams">
        select jp.JOB_PARAM_ID,
        p.PARAM_ID,
        jp.IS_UPSTREAM_OUTPUT,
        jp.SORT_INDEX,
        p.PARAM_NAME,
        p.IS_PRESET,
        jp.JOB_PARAM_TYPE,
        p.DATA_TYPE,
        p.PARAM_TYPE,
        case when p.PARAM_TYPE = 'TIME' then tp.expression
        when p.PARAM_TYPE = 'FIXED' then fp.param_value
        when p.PARAM_TYPE = 'RUNTIME' then rp.DEFAULT_VALUE else ''
        end as PARAM_VALUE
        from JOB_PARAMS jp
        inner join PARAMETERS p
        on jp.PARAM_ID = p.PARAM_ID
        and jp.JOB_ID = #{jobId}
        and jp.IS_UPSTREAM_OUTPUT = 'N'
        left join TIME_PARAMS tp
        on tp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'TIME'
        and tp.DELETED = 'N'
        left join FIXED_PARAMS fp
        on fp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'FIXED'
        and fp.DELETED = 'N'
        left join RUNTIME_PARAMS rp
        on rp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'RUNTIME'
        and rp.DELETED = 'N'
        union
        select
        jp.JOB_PARAM_ID, jp.PARAM_ID, jp.IS_UPSTREAM_OUTPUT, jp.SORT_INDEX, jip.PARAM_NAME, jip.IS_PRESET,
        jp.JOB_PARAM_TYPE, jip.DATA_TYPE, jip.PARAM_TYPE, jip.PARAM_VALUE
        from JOB_PARAMS jp
        inner join JOB_PARAM_MAPPING jpm
        on jpm.JOB_PARAM_ID = jp.JOB_PARAM_ID
        and jp.JOB_ID = #{jobId}
        and jp.IS_UPSTREAM_OUTPUT = 'Y'
        inner join JOB_INSTANCE_PARAMS jip
        on jpm.REF_JOB_PARAM_ID = jip.JOB_PARAM_ID
        and jip.JFI_ID = #{jfiId}
    </select>

    <select id="getPersetParams" parameterType="string"
            resultType="com.boncfc.ide.plugin.task.api.model.JobInstanceParams">
        select '' JOB_PARAM_ID,
        p.PARAM_ID,
        'N' IS_UPSTREAM_OUTPUT,
        0 SORT_INDEX,
        p.PARAM_NAME,
        p.IS_PRESET,
        '' JOB_PARAM_TYPE,
        p.DATA_TYPE,
        p.PARAM_TYPE,
        case
        when p.PARAM_TYPE = 'TIME' then tp.expression
        when p.PARAM_TYPE = 'FIXED' then fp.param_value
        when p.PARAM_TYPE = 'RUNTIME' then rp.DEFAULT_VALUE
        else ''
        end as PARAM_VALUE
        from PARAMETERS p
        left join TIME_PARAMS tp
        on tp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'TIME'
        and tp.DELETED = 'N'
        left join FIXED_PARAMS fp
        on fp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'FIXED'
        and fp.DELETED = 'N'
        left join RUNTIME_PARAMS rp
        on rp.PARAM_ID = p.PARAM_ID
        and p.PARAM_TYPE = 'RUNTIME'
        and rp.DELETED = 'N'
        where IS_PRESET = 'Y'
        and PARAM_NAME = #{paramName}
    </select>

    <select id="getJobDetails" resultType="com.boncfc.ide.plugin.task.api.model.JobDetails">
        select jd_id,
        job_id,
        job_name,
        job_type,
        job_desc,
        sc_id,
        job_conf,
        retry_count,
        retry_interval_s,
        ignore_error,
        job_version_id,
        deleted,
        creator,
        create_time,
        updater,
        update_time
        from JOB_DETAILS
        where DELETED = 'N' and JD_ID = #{jdId} and JOB_ID = #{jobId}
    </select>

    <update id="updateJobInstance" parameterType="com.boncfc.ide.plugin.task.api.model.JobInstance">
        update JOB_INSTANCE ji
        <trim prefix="SET" suffixOverrides=",">
            <if test="status!=null">
                ji.UPDATE_TIME = sysdate,
            </if>
            <if test="status!=null">
                ji.STATUS = #{status},
            </if>
            <if test="extendedStatus!=null">
                ji.EXTENDED_STATUS = #{extendedStatus},
            </if>
            <if test="finishTime!=null">
                ji.FINISH_TIME = #{finishTime},
            </if>
            <if test="takenTime!=null">
                ji.TAKEN_TIME = #{takenTime},
            </if>
            <if test="retryCount!=null">
                ji.RETRY_COUNT = #{retryCount},
            </if>
            <if test="workerIp!=null">
                ji.WORKER_IP = #{workerIp}
            </if>
        </trim>
        where ji.JI_ID = #{jiId}
    </update>

    <delete id="deleteFromJobInstanceQueue">
        delete from JOB_INSTANCE_QUEUE where JI_ID = #{jiId}
    </delete>

    <update id="deleteJobInstanceParams" parameterType="string">
        update JOB_INSTANCE_PARAMS
        set DELETED = 'Y'
        where JI_ID = #{jiId}
    </update>

    <insert id="addJobInstanceParams" parameterType="com.boncfc.ide.plugin.task.api.model.JobInstanceParams">
        insert into JOB_INSTANCE_PARAMS(jip_id, jfi_id, ji_id, job_param_id, param_id, param_name,
        is_preset, job_param_type, data_type, param_type, param_value)
        select SEQ_JOB_INSTANCE_PARAMS.nextval, m.* from (
        <foreach collection="jobInstanceParams" item="jip" index="index" separator="union all">
            select #{jip.jfiId},#{jip.jiId},#{jip.jobParamId},#{jip.paramId},#{jip.paramName},
            #{jip.isPreset},#{jip.jobParamType},#{jip.dataType},#{jip.paramType},#{jip.paramValue}
            from dual
        </foreach>
        ) m
    </insert>

    <insert id="addJobInstanceIds" parameterType="com.boncfc.ide.plugin.task.api.model.JobInstanceIds">
        insert into JOB_INSTANCE_IDS(ji_id, id_type, id_value, create_time)
        select SEQ_JOB_INSTANCE_IDS.nextval,m.* from (
        <foreach collection="jobInstanceIdsList" item="jiids" index="index" separator="union all">
            select #{jiids.idType}, #{jiids.idValue}, sysdate from dual
        </foreach>
        )m
    </insert>

    <select id="getDatasourceDetailInfoList" resultType="com.boncfc.ide.plugin.task.api.model.DatasourceDetailInfo">
        select ds.DS_ID,
            ds.DS_TYPE,
            ds.DS_NAME,
            ds.DS_CONF,
            dc.CLASS_NAME,
            dc.DRIVER_NAME,
            dc.DRIVER_TYPE,
            dc.DRIVER_VERSION,
            dc.JAR_DIR,
            dc.JAR_FILE_NAME,
            clusters.CLUSTER_NAME,
            clusters.DEPENDENCY_JARS_DIR,
            clusters.HADOOP_CONF_DIR,
            clusters.KRB_CONF_PATH,
            clusters.KRB_KEYTABS_DIR,
            clusters.IS_SECURITY,
            clusters.PRINCIPAL_NAME,
            clusters.METASTORE_URL,
            dei.INDEX_NAME,
            pl.PLUGIN_NAME,
            pl.PLUGIN_TYPE
        from DATASOURCES ds
        left join DRIVER_CONFIGS dc
            on ds.DRIVER_ID = dc.DRIVER_ID
            and ds.DELETED = 'N'
        left join (select
                        ccc.CLUSTER_ID,
                        c.CLUSTER_NAME,
                        c.CLUSTER_TYPE,
                        ccc.DEPENDENCY_JARS_DIR,
                        ccc.HADOOP_CONF_DIR,
                        ccc.KRB_CONF_PATH,
                        ccc.KRB_KEYTABS_DIR,
                        ccc.IS_SECURITY,
                        ccc.METASTORE_URL,
                        kpc.PRINCIPAL_NAME
            from CLUSTERS c
                    inner join CDP_CLUSTER_CONFIGS ccc
                        on c.CLUSTER_ID = ccc.CLUSTER_ID
                        and c.DELETED = 'N'
                    left join KRB_PINCIPAL_CONIFGS kpc
                        on c.CLUSTER_ID = kpc.CLUSTER_ID) clusters
            on clusters.CLUSTER_ID = ds.CLUSTER_ID
            and ds.DELETED = 'N'
        left join DS_ES_INDEX dei
            on ds.DS_ID = dei.DS_ID
            and ds.DS_TYPE = 'ES'
        left join (
            select dpr.DS_ID, dpc.DPC_ID, dpc.PLUGIN_NAME, dpc.PLUGIN_TYPE
            from DATAX_PLUGIN_CONFIGS dpc
            inner join DS_PLUGIN_REL dpr
            on dpc.DPC_ID = dpr.DPC_ID
            <where>
                <if test="pluginType != null">
                    dpc.PLUGIN_TYPE = #{pluginType}
                </if>
            </where>
        ) pl on pl.DS_ID = ds.DS_ID
        <where>
            <foreach item="dsId" index="index" collection="dsIds"
                     open="ds.DS_ID in (" separator="," close=")" nullable="true">
                #{dsId}
            </foreach>
        </where>
    </select>

</mapper>